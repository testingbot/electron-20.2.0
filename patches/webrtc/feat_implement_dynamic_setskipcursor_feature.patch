From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: administrator <administrator@7807.local>
Date: Wed, 13 Oct 2021 13:53:25 +0100
Subject: skip cursor


diff --git a/modules/desktop_capture/desktop_and_cursor_composer.cc b/modules/desktop_capture/desktop_and_cursor_composer.cc
index 7be8982abeaa9d14d031e761868e68e225ee717c..5da38c5e3e6ce60749d4c9221782d1b2cf664ba4 100644
--- a/modules/desktop_capture/desktop_and_cursor_composer.cc
+++ b/modules/desktop_capture/desktop_and_cursor_composer.cc
@@ -217,32 +217,6 @@
 void DesktopAndCursorComposer::OnCaptureResult(
     DesktopCapturer::Result result,
     std::unique_ptr<DesktopFrame> frame) {
-  if (frame && cursor_) {
-    if (!frame->may_contain_cursor() &&
-        frame->rect().Contains(cursor_position_) &&
-        !desktop_capturer_->IsOccluded(cursor_position_)) {
-      DesktopVector relative_position =
-          cursor_position_.subtract(frame->top_left());
-#if defined(WEBRTC_MAC) || defined(CHROMEOS)
-      // On OSX, the logical(DIP) and physical coordinates are used mixingly.
-      // For example, the captured cursor has its size in physical pixels(2x)
-      // and location in logical(DIP) pixels on Retina monitor. This will cause
-      // problem when the desktop is mixed with Retina and non-Retina monitors.
-      // So we use DIP pixel for all location info and compensate with the scale
-      // factor of current frame to the `relative_position`.
-      const float scale = frame->scale_factor();
-      relative_position.set(relative_position.x() * scale,
-                            relative_position.y() * scale);
-#endif
-      auto frame_with_cursor = std::make_unique<DesktopFrameWithCursor>(
-          std::move(frame), *cursor_, relative_position, previous_cursor_rect_,
-          cursor_changed_);
-      previous_cursor_rect_ = frame_with_cursor->cursor_rect();
-      cursor_changed_ = false;
-      frame = std::move(frame_with_cursor);
-      frame->set_may_contain_cursor(true);
-    }
-  }
-
   callback_->OnCaptureResult(result, std::move(frame));
 }
 
